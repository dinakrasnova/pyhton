#args and kwargs

def is_cat_here(*args):
    if 'cats' in args:
        return True
    else:
        return False
    
print(is_cat_here('cats is here'))

def is_item_here(item,*args):
    if item in args:
        return True
    else:
        return False
    
print(is_item_here(1, 1234))

def your_favorite_color(my_color, **kwargs): 
    if 'color' in kwargs:
        print('My favorite color is ' + my_color + ', but {} is also pretty good!'.format(kwargs['color']))
    else:
        print('My favorite color is ' + my_color + ' , what is your favorite color?')
        
your_favorite_color('green', name = 'Jane')
your_favorite_color('green', name = 'Jane', color = 'red')

#Классы Создайте класс BlogPost с атрибутами user_name, text, number_of_likes. Создайте два объекта этого класса. После создания измените атрибут number_of_likes одного из объектов. Распечатайте атрибут number_of_likes каждого из объектов

#Мое решение

class BlogPost:
    def __init__(self, user_name, text, number_of_likes):
        self.user_name = user_name
        self.text = text
        self.number_of_likes = number_of_likes
    
    def changenumber_of_likes(self,newnumber_of_likes):
        self.number_of_likes = newnumber_of_likes

user_John = BlogPost(user_name = 'John', text = 'hi', number_of_likes = 4)
user_Jane = BlogPost(user_name = 'Jane', text = 'hello', number_of_likes = 5)

print(user_John.number_of_likes)
print(user_Jane.number_of_likes)

    
user_John.changenumber_of_likes(6)

print(user_John.number_of_likes)

#Ответ

class BlogPost:
    def __init__(self, user_name, text, number_of_likes):
        self.user_name = user_name
        self.text = text
        self.number_of_likes = number_of_likes


post_about_politicians = BlogPost('John', 'I like politicians', 0)
post_about_cats = BlogPost('Jane', 'I like cats', 0)

post_about_cats.number_of_likes = 1000

print(post_about_politicians.number_of_likes)
print(post_about_cats.number_of_likes)

#Методы Создайте класс BankAccount с атрибутами client_id, client_first_name, client_last_name, balance и методами add() и withdraw(), при помощи которых можно пополнять счет и выводить средства со счета соответственно. Атрибут balance должен инициализироваться по умолчанию значением 0.0 и меняться при срабатывании методов add() и withdraw().

class BankAccount:
    def __init__(self, client_id, client_first_name, client_last_name, balance = 0.0):
        self.client_id = client_id
        self.client_first_name = client_first_name
        self.client_last_name = client_last_name
        self.balance = balance
        
 
    def add(self, n):
        self.balance += n
 
    def withdraw(self, n):
        self.balance -= n
 
    def print_balance (self):
        print('%.2f' % self.balance)
        
        
   #Ответ
   
   class BankAccount:

    def __init__(self, client_id, client_first_name,
                 client_last_name):
        self.client_id = client_id
        self.client_first_name = client_first_name
        self.client_last_name = client_last_name
        self.balance = 0.0

    def add(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        self.balance -= amount


account_1 = BankAccount(1, 'John', 'Brown')
account_2 = BankAccount(2, 'Jim', 'White')

account_1.add(1000)
print(account_1.balance)
account_1.withdraw(500)
print(account_1.balance)
print(account_2.balance)
